# üîπ DESAFIO: Criando um Sistema de Gest√£o de Ve√≠culos com SQLite üöó

# üìå Enunciado:
# A concession√°ria "Super Carros" deseja um sistema para gerenciar seu estoque de ve√≠culos
# utilizando Programa√ß√£o Orientada a Objetos (POO) e armazenando os dados em um banco de dados SQLite.
# O sistema deve permitir o cadastro, listagem, edi√ß√£o e remo√ß√£o de ve√≠culos diretamente no banco.
#
# ‚úÖ A classe `Database` j√° est√° pronta e implementa os m√©todos necess√°rios para interagir com o SQLite.
# Seu desafio √© utilizar essa classe para criar um menu interativo onde o usu√°rio poder√° gerenciar os ve√≠culos.
#
# O sistema deve funcionar da seguinte forma:
# 1. O usu√°rio pode cadastrar um novo ve√≠culo informando:
#    - Marca
#    - Modelo
#    - Ano
#    - Tipo (Carro, Moto, Caminh√£o) *(se nenhum tipo for informado corretamente, o padr√£o ser√° Carro)*.
# 2. O usu√°rio pode visualizar a lista de ve√≠culos cadastrados.
# 3. O usu√°rio pode editar os dados de um ve√≠culo existente.
# 4. O usu√°rio pode remover um ve√≠culo pelo ID da tabela do banco de dados.
# 5. O sistema deve rodar em um loop at√© que o usu√°rio escolha sair.
#
# ‚úÖ Tarefa:
# - Utilizar a classe `Database` para armazenar e manipular os ve√≠culos no banco de dados.
# - Instalar o pacote externo do sqlite utilizando o pip "pip install sqlite".
# - Criar um menu interativo para o usu√°rio.
#
# üî• Dica:
# - Utilize o m√≥dulo `sqlite` criado previamente para interagir com o banco de dados.
# - Use `input()` para interagir com o usu√°rio.
# - Certifique-se de tratar entradas inv√°lidas.

from sqlite import Database

# Classe base Veiculo
class Veiculo:
    def __init__(self, marca, modelo, ano):
        self.marca = marca
        self.modelo = modelo
        self.ano = ano

    def __str__(self):
        return f"{self.marca} {self.modelo} ({self.ano})"

# Classes derivadas Carro, Moto e Caminhao
class Carro(Veiculo):
    def __init__(self, marca, modelo, ano):
        super().__init__(marca, modelo, ano)
        self.tipo = "Carro"

class Moto(Veiculo):
    def __init__(self, marca, modelo, ano):
        super().__init__(marca, modelo, ano)
        self.tipo = "Moto"

class Caminhao(Veiculo):
    def __init__(self, marca, modelo, ano):
        super().__init__(marca, modelo, ano)
        self.tipo = "Caminh√£o"

# Classe Concessionaria para gerenciar a lista de ve√≠culos usando SQLite
class Concessionaria:
    def __init__(self, db_name):
        self.db = Database(db_name)

    def cadastrar_veiculo(self, veiculo):
        self.db.inserir_veiculo(veiculo.marca, veiculo.modelo, veiculo.ano, veiculo.tipo)

    def listar_veiculos(self):
        veiculos = self.db.listar_veiculos()
        if not veiculos:
            print("Nenhum ve√≠culo cadastrado.")
        else:
            for veiculo in veiculos:
                print(f"{veiculo[0]}: {veiculo[1]} {veiculo[2]} ({veiculo[3]}) - Tipo: {veiculo[4]}")

    def atualizar_veiculo(self, veiculo_id, marca, modelo, ano, tipo):
        self.db.atualizar_veiculo(veiculo_id, marca, modelo, ano, tipo)

    def remover_veiculo(self, veiculo_id):
        self.db.remover_veiculo(veiculo_id)

# Fun√ß√£o para exibir o menu interativo
def menu():
    concessionaria = Concessionaria('concessionaria.db')
    while True:
        print("\nMenu:")
        print("1. Cadastrar ve√≠culo")
        print("2. Listar ve√≠culos")
        print("3. Editar ve√≠culo")
        print("4. Remover ve√≠culo")
        print("5. Sair")
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            marca = input("Marca: ")
            modelo = input("Modelo: ")
            ano = input("Ano: ")
            tipo = input("Tipo (Carro, Moto, Caminh√£o): ").capitalize()
            if tipo == "Moto":
                veiculo = Moto(marca, modelo, ano)
            elif tipo == "Caminh√£o":
                veiculo = Caminhao(marca, modelo, ano)
            else:
                veiculo = Carro(marca, modelo, ano)
            concessionaria.cadastrar_veiculo(veiculo)
            print("Ve√≠culo cadastrado com sucesso!")
            
        elif opcao == "2":
            concessionaria.listar_veiculos()

        elif opcao == "3":
            veiculo_id = int(input("ID do ve√≠culo a editar: "))
            marca = input("Nova Marca: ")
            modelo = input("Novo Modelo: ")
            ano = input("Novo Ano: ")
            tipo = input("Novo Tipo (Carro, Moto, Caminh√£o): ").capitalize()
            if tipo not in ["Carro", "Moto", "Caminh√£o"]:
                tipo = "Carro"
            concessionaria.atualizar_veiculo(veiculo_id, marca, modelo, ano, tipo)
            print("Ve√≠culo atualizado com sucesso!")

        elif opcao == "4":
            veiculo_id = int(input("ID do ve√≠culo a remover: "))
            concessionaria.remover_veiculo(veiculo_id)
            print("Ve√≠culo removido com sucesso!")

        elif opcao == "5":
            print("Saindo do sistema...")
            break
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")

# Executar o menu
if __name__ == "__main__":
    menu()