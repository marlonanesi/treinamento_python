# ğŸ”¹ DESAFIO: Criando um Sistema de GestÃ£o de VeÃ­culos com SQLite ğŸš—

# ğŸ“Œ Enunciado:
# A concessionÃ¡ria "Super Carros" deseja um sistema para gerenciar seu estoque de veÃ­culos
# utilizando ProgramaÃ§Ã£o Orientada a Objetos (POO) e armazenando os dados em um banco de dados SQLite.
# O sistema deve permitir o cadastro, listagem, ediÃ§Ã£o e remoÃ§Ã£o de veÃ­culos diretamente no banco.
#
# âœ… A classe `Database` jÃ¡ estÃ¡ pronta e implementa os mÃ©todos necessÃ¡rios para interagir com o SQLite.
# Seu desafio Ã© utilizar essa classe para criar um menu interativo onde o usuÃ¡rio poderÃ¡ gerenciar os veÃ­culos.
#
# O sistema deve funcionar da seguinte forma:
# 1. O usuÃ¡rio pode cadastrar um novo veÃ­culo informando:
#    - Marca
#    - Modelo
#    - Ano
#    - Tipo (Carro, Moto, CaminhÃ£o) *(se nenhum tipo for informado corretamente, o padrÃ£o serÃ¡ Carro)*.
# 2. O usuÃ¡rio pode visualizar a lista de veÃ­culos cadastrados.
# 3. O usuÃ¡rio pode editar os dados de um veÃ­culo existente.
# 4. O usuÃ¡rio pode remover um veÃ­culo pelo ID da tabela do banco de dados.
# 5. O sistema deve rodar em um loop atÃ© que o usuÃ¡rio escolha sair.
#
# âœ… Tarefa:
# - Utilizar a classe `Database` para armazenar e manipular os veÃ­culos no banco de dados.
# - Instalar o pacote externo do sqlite utilizando o pip "pip install sqlite".
# - Criar um menu interativo para o usuÃ¡rio.
#
# ğŸ”¥ Dica:
# - Utilize o mÃ³dulo `sqlite` criado previamente para interagir com o banco de dados.
# - Use `input()` para interagir com o usuÃ¡rio.
# - Certifique-se de tratar entradas invÃ¡lidas.

