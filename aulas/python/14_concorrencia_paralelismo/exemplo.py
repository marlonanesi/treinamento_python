# üîπ Compara√ß√£o Did√°tica: Concorr√™ncia e Paralelismo em Python

import threading
import multiprocessing
import asyncio
import time

# üìå Exemplo 1: Concorr√™ncia com Threading
print("\nüîπ Exemplo de Concorr√™ncia com Threading")

def tarefa(nome, contador):
    """
    Fun√ß√£o executada pelas threads/processos.
    :param nome: Nome identificador da thread/processo
    :param contador: N√∫mero de itera√ß√µes da tarefa
    """
    print(f"Iniciando {nome}...")
    for i in range(contador):
        time.sleep(0.5)
        print(f"{nome}: {i+1}")
    print(f"Finalizando {nome}...")

def escrever_frase(nome, frase):
    """
    Fun√ß√£o que escreve uma frase palavra por palavra para demonstrar concorr√™ncia.
    :param nome: Nome identificador da thread
    :param frase: Frase a ser escrita
    """
    palavras = frase.split()
    for palavra in palavras:
        time.sleep(0.5)
        print(f"{nome}: {palavra}")

if __name__ == "__main__":
    inicio = time.time()

    # Criando m√∫ltiplas threads
    # target=tarefa -> Define a fun√ß√£o que ser√° executada pela thread
    # args=("Thread 1", 4) -> Passa os argumentos para a fun√ß√£o tarefa
    thread1 = threading.Thread(target=escrever_frase, args=("Frase 1", "Python √© incr√≠vel para concorr√™ncia"))
    thread2 = threading.Thread(target=escrever_frase, args=("Frase 2", "Threads ajudam a rodar tarefas simult√¢neas"))

    # Iniciando as threads
    thread1.start()
    thread2.start()

    # join() -> Aguarda a finaliza√ß√£o da thread antes de continuar
    thread1.join()
    thread2.join()

    fim = time.time()
    print(f"Todas as threads finalizaram em {fim - inicio:.2f} segundos!\n")

    # üìå Exemplo 2: Paralelismo com Multiprocessing
    print("\nüîπ Exemplo de Paralelismo com Multiprocessing")

    inicio = time.time()

    # Criando processos (semelhante √†s threads, mas rodando em n√∫cleos separados)
    processo1 = multiprocessing.Process(target=tarefa, args=("Processo 1", 4))
    processo2 = multiprocessing.Process(target=tarefa, args=("Processo 2", 4))

    # Iniciando os processos
    processo1.start()
    processo2.start()

    # join() -> Aguarda a finaliza√ß√£o do processo antes de continuar
    processo1.join()
    processo2.join()

    fim = time.time()
    print(f"Todos os processos finalizaram em {fim - inicio:.2f} segundos!\n")

    # üìå Exemplo 3: Programa√ß√£o Ass√≠ncrona com asyncio
    print("\nüîπ Exemplo de Programa√ß√£o Ass√≠ncrona com asyncio")

    async def tarefa_async(nome, contador):
        """
        Fun√ß√£o ass√≠ncrona que simula uma tarefa concorrente.
        :param nome: Nome identificador da tarefa ass√≠ncrona
        :param contador: N√∫mero de itera√ß√µes da tarefa
        """
        print(f"Iniciando {nome}...")
        for i in range(contador):
            await asyncio.sleep(0.5)  # await permite execu√ß√£o ass√≠ncrona sem bloquear
            print(f"{nome}: {i+1}")
        print(f"Finalizando {nome}...")

    async def main():
        inicio = time.time()
        # asyncio.gather() -> Executa m√∫ltiplas tarefas ass√≠ncronas ao mesmo tempo
        await asyncio.gather(
            tarefa_async("Tarefa Ass√≠ncrona 1", 4),
            tarefa_async("Tarefa Ass√≠ncrona 2", 4)
        )
        fim = time.time()
        print(f"Todas as tarefas ass√≠ncronas finalizaram em {fim - inicio:.2f} segundos!\n")

    asyncio.run(main())

    print("\n‚úÖ Conclus√£o: Threading √© √∫til para tarefas de I/O, Multiprocessing √© ideal para processamento pesado, e Asyncio melhora efici√™ncia em opera√ß√µes ass√≠ncronas!")
