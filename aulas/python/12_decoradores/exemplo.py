# ğŸ”¹ ComparaÃ§Ã£o DidÃ¡tica: Decoradores em Python

# ğŸ“Œ Exemplo 1: Criando um Decorador Simples
def meu_decorador(func):
    def wrapper():
        print("Executando algo antes da funÃ§Ã£o...")
        func()
        print("Executando algo depois da funÃ§Ã£o...")
    return wrapper

@meu_decorador  # Aplicando o decorador Ã  funÃ§Ã£o
def saudacao():
    print("OlÃ¡, mundo!")

print("\nğŸ”¹ Exemplo de Decorador Simples")
saudacao()

# ğŸ“Œ Exemplo 2: Decorador para Medir Tempo de ExecuÃ§Ã£o
import time

def medir_tempo(func):
    def wrapper(*args, **kwargs):
        inicio = time.time()
        resultado = func(*args, **kwargs)
        fim = time.time()
        print(f"Tempo de execuÃ§Ã£o: {fim - inicio:.4f} segundos")
        return resultado
    return wrapper

@medir_tempo
def tarefa_pesada():
    time.sleep(2)
    print("Tarefa concluÃ­da!")

print("\nğŸ”¹ Exemplo de Decorador para Medir Tempo")
tarefa_pesada()

# ğŸ“Œ Exemplo 3: Decorador com Argumentos
def repetir(n):
    def decorador(func):
        def wrapper(*args, **kwargs):
            for _ in range(n):
                func(*args, **kwargs)
        return wrapper
    return decorador

@repetir(3)
def mensagem():
    print("Executando a funÃ§Ã£o repetida!")

print("\nğŸ”¹ Exemplo de Decorador com Argumentos")
mensagem()

# ğŸ“Œ Exemplo 4: Decoradores Embutidos (`@staticmethod`, `@classmethod`, `@property`)
class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    
    @staticmethod
    def mensagem():
        print("Bem-vindo ao sistema!")
    
    @classmethod
    def criar_padrao(cls, nome):
        return cls(nome, 18)
    
    @property
    def saudacao(self):
        return f"OlÃ¡, meu nome Ã© {self.nome} e tenho {self.idade} anos."

print("\nğŸ”¹ Exemplo de Decoradores Embutidos")
Pessoa.mensagem()
pessoa1 = Pessoa.criar_padrao("Carlos")
print(pessoa1.saudacao)

print("\nâœ… ConclusÃ£o: Decoradores sÃ£o Ãºteis para modificar funÃ§Ãµes e mÃ©todos de forma reutilizÃ¡vel e eficiente!")
