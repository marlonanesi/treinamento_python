# üîπ Compara√ß√£o Did√°tica: Decoradores em Python

# üìå Exemplo 1: Criando um Decorador Simples
def meu_decorador(func):
    def wrapper():
        print("Executando algo antes da fun√ß√£o...")  # A√ß√£o antes da fun√ß√£o decorada
        func()  # Chamada da fun√ß√£o original
        print("Executando algo depois da fun√ß√£o...")  # A√ß√£o depois da fun√ß√£o decorada
    return wrapper

@meu_decorador  # Aplicando o decorador √† fun√ß√£o
def saudacao():
    print("Ol√°, mundo!")

print("\nüîπ Exemplo de Decorador Simples")
saudacao()

# üìå Exemplo 2: Decorador para Medir Tempo de Execu√ß√£o
import time

def medir_tempo(func):
    def wrapper(*args, **kwargs):
        inicio = time.time()  # Marca o tempo inicial
        resultado = func(*args, **kwargs)  # Executa a fun√ß√£o original
        fim = time.time()  # Marca o tempo final
        print(f"Tempo de execu√ß√£o: {fim - inicio:.4f} segundos")  # Calcula e exibe o tempo de execu√ß√£o
        return resultado
    return wrapper

@medir_tempo
def tarefa_pesada():
    time.sleep(2)  # Simula uma tarefa demorada
    print("Tarefa conclu√≠da!")

print("\nüîπ Exemplo de Decorador para Medir Tempo")
tarefa_pesada()

# üìå Exemplo 3: Decorador com Argumentos
def repetir(n):
    def decorador(func):
        def wrapper(*args, **kwargs):
            for _ in range(n):  # Repete a execu√ß√£o da fun√ß√£o `n` vezes
                func(*args, **kwargs)
        return wrapper
    return decorador

@repetir(3)  # O decorador recebe um argumento (n√∫mero de repeti√ß√µes)
def mensagem():
    print("Executando a fun√ß√£o repetida!")

print("\nüîπ Exemplo de Decorador com Argumentos")
mensagem()

# üìå Exemplo 4: Decoradores Embutidos (`@staticmethod`, `@classmethod`, `@property`)
class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    
    @staticmethod
    def mensagem():
        # `@staticmethod`: M√©todo que n√£o depende da inst√¢ncia ou da classe.
        # Pode ser chamado diretamente sem acessar atributos ou m√©todos da classe.
        print("Bem-vindo ao sistema!")
    
    @classmethod
    def criar_padrao(cls, nome):
        # `@classmethod`: M√©todo que recebe a classe como primeiro argumento (cls).
        # √ötil para criar inst√¢ncias ou acessar atributos/m√©todos da classe.
        return cls(nome, 18)
    
    @property
    def saudacao(self):
        # `@property`: Permite acessar um m√©todo como se fosse um atributo.
        # √ötil para encapsular l√≥gica de acesso a atributos.
        return f"Ol√°, meu nome √© {self.nome} e tenho {self.idade} anos."

print("\nüîπ Exemplo de Decoradores Embutidos")
Pessoa.mensagem()  # Chamada de m√©todo est√°tico
pessoa1 = Pessoa.criar_padrao("Carlos")  # Cria√ß√£o de inst√¢ncia usando m√©todo de classe
print(pessoa1.saudacao)  # Acessando o m√©todo como se fosse um atributo

print("\n‚úÖ Conclus√£o: Decoradores s√£o √∫teis para modificar fun√ß√µes e m√©todos de forma reutiliz√°vel e eficiente!")